23) Non-Abundant Sums: 
# # Enter your code here. Read input from STDIN. Print output to STDOUT

import math 
def sum_proper_div(num): 
    s = 0
    for i in range(2,int(math.sqrt(num))+1): 
        if num%i == 0: 
            s +=i 
            y = num//i
            if i!= y: 
                s += y 
            
    return s+1 

abun_arr = []

for i in range(12,28123):
    if  sum_proper_div(i) > i: 
        abun_arr.append(i)
            
N = int(input())

for i in range(N): 
    num  = int(input())

    if num < 24: 
        print ('NO')
    elif num > 28123 :
        print ('YES')
        
    else: 
        found = False
        for item1 in abun_arr: 
            if num-item1 in abun_arr:
                found = True 
                break
        if found: 
            print('YES')
        else: 
            print('NO')

25) N-Digit Fibonacci 
fib = [0,1,1]
cache = {1:1}
j =2 
size = 10 

for i in range(3,25000):
    fib.append(fib[i-1] + fib[i-2])
    
    if fib[i] >= size:
        cache[j] = i
        size*= 10 
        j+=1 
        
N = int(input())
        
for i in range(N): 
    print (cache[int(input())])

24) Lexicographic Permutations
from math import factorial
def lint(n):
    if n==int(n):
        return int(n)
    else:
        return int(n)+1
word='abcdefghijklm'
li=[]
for i in sorted(word):
    li.append(i)

def answer_calc(pos,lis):
    answer=''
    for i in range(len(word)-1,-1,-1):
        index=lint(pos/factorial(i))-1
        answer+=lis.pop(index)

        pos+=-(index)*factorial(i)

    return answer
for _ in range(int(input())):
    n=int(input())
    print(answer_calc(n,li[:]))


                

            



