Q.1) INHERITANCE AND POLYMORPHISM? 
INHERITANCE: Allows to define a class that inherits all the properties and method from the parent class 
Below Student class is inheriting properties from the Parent class Person. 
class Person:
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname
  def printname(self):
    print(self.firstname, self.lastname)
#Use the Person class to create an object, and then execute the printname method:
x = Person("John", "Doe")
x.printname()

class Student(Person):
  pass
x = Student("Mike", "Olsen")
x.printname()

POLYMORPHISM: Class with Methods can be used by other classes. It is the property of having many forms. 
Below you can see different classes with the same method. With polymorphism we are able to use only a single statement to use the method from all the 3 classes. 
CLASS POLYMORPHISM: 
class Car:
  def __init__(self, brand, model):
    self.brand = brand
    self.model = model

  def move(self):
    print("Drive!")

class Boat:
  def __init__(self, brand, model):
    self.brand = brand
    self.model = model

  def move(self):
    print("Sail!")

class Plane:
  def __init__(self, brand, model):
    self.brand = brand
    self.model = model

  def move(self):
    print("Fly!")

car1 = Car("Ford", "Mustang")       #Create a Car class
boat1 = Boat("Ibiza", "Touring 20") #Create a Boat class
plane1 = Plane("Boeing", "747")     #Create a Plane class

for x in (car1, boat1, plane1):
  x.move()

2) What is Method Overriding in python? 
It allows a child class to provide a specific implementation of a method that is already provided by one of its super-classes or parent classes. 
Below, move method in boat and plane are overriding move method of Vehicle Class. 
class Vehicle:
  def __init__(self, brand, model):
    self.brand = brand
    self.model = model

  def move(self):
    print("Move!")

class Car(Vehicle):
  pass

class Boat(Vehicle):
  def move(self):
    print("Sail!")

class Plane(Vehicle):
  def move(self):
    print("Fly!")

car1 = Car("Ford", "Mustang") #Create a Car object
boat1 = Boat("Ibiza", "Touring 20") #Create a Boat object
plane1 = Plane("Boeing", "747") #Create a Plane object

for x in (car1, boat1, plane1):
  print(x.brand) #POLYMORPHISM 
  print(x.model)
  x.move()


Q.3) GENERATOR in Python? 

Q.4) PYTHON ITERATORS: 
An iterator is an object that can be iterated upon, means you can iterate through all values. 
Below you can an iterator object is created using __iter__ and __next__ methods. 
class MyNumbers:
  def __iter__(self):
    self.a = 1
    return self

  def __next__(self):
    if self.a <= 20:
      x = self.a
      self.a += 1
      return x
    else:
      raise StopIteration

myclass = MyNumbers()
myiter = iter(myclass)

for x in myiter:
  print(x)

Q.5 SCOPE in python? 
A variable is only available inside the region it is created
Variable can used by a function inside a function. 
Variables with Global scope could be used by anyone. 

Q.6 MODULE in python? 
It's a set of function who want to include in your code. 
Greeting is a function defined in mymodule. 
def greeting(name):
  print("Hello, " + name) # save this as mymodule.py 

import mymodule
mymodule.greeting("Jonathan")

Q.7) DATE in python? 
strftime() method is used to format date objects into readable strings

import datetime 
x = datetime.datetime.now()
print(x.strftime('%A'))

Q.8) MATH functions: 
import math 
x = math.sqrt(64)
x = math.ceil(1.4)
y = math.floor(1.4)
x = math.pi

x = min(5, 10, 25)
y = max(5, 10, 25)
x = abs(-7.25)
x = pow(4, 3)

Q.9 JSON in Python: 
Json is a syntax used to storing and exchanging data 

import json 
a = '{"name": "Suresh", "age": 30, "Gender": "male"}'
x = json.loads(a) #parse json to python 
print(x['Gender'])

import json 
# a python object (dict)
a = {"name": "Neha", "age": 30, "Gender": "Female"}
f = json.dumps(a) #converting python to json 
print(f)

Q.10 REGEX in Python? 





