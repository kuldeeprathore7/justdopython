Q.1) INHERITANCE AND POLYMORPHISM? 
INHERITANCE: Allows to define a class that inherits all the properties and method from the parent class 
Below Student class is inheriting properties from the Parent class Person. 
class Person:
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname
  def printname(self):
    print(self.firstname, self.lastname)
#Use the Person class to create an object, and then execute the printname method:
x = Person("John", "Doe")
x.printname()

class Student(Person):
  pass
x = Student("Mike", "Olsen")
x.printname()

POLYMORPHISM: Class with Methods can be used by other classes. It is the property of having many forms. 
Below you can see different classes with the same method. With polymorphism we are able to use only a single statement to use the method from all the 3 classes. 
CLASS POLYMORPHISM: 
class Car:
  def __init__(self, brand, model):
    self.brand = brand
    self.model = model

  def move(self):
    print("Drive!")

class Boat:
  def __init__(self, brand, model):
    self.brand = brand
    self.model = model

  def move(self):
    print("Sail!")

class Plane:
  def __init__(self, brand, model):
    self.brand = brand
    self.model = model

  def move(self):
    print("Fly!")

car1 = Car("Ford", "Mustang")       #Create a Car class
boat1 = Boat("Ibiza", "Touring 20") #Create a Boat class
plane1 = Plane("Boeing", "747")     #Create a Plane class

for x in (car1, boat1, plane1):
  x.move()

2) What is Method Overriding in python? 
It allows a child class to provide a specific implementation of a method that is already provided by one of its super-classes or parent classes. 
Below, move method in boat and plane are overriding move method of Vehicle Class. 
class Vehicle:
  def __init__(self, brand, model):
    self.brand = brand
    self.model = model

  def move(self):
    print("Move!")

class Car(Vehicle):
  pass

class Boat(Vehicle):
  def move(self):
    print("Sail!")

class Plane(Vehicle):
  def move(self):
    print("Fly!")

car1 = Car("Ford", "Mustang") #Create a Car object
boat1 = Boat("Ibiza", "Touring 20") #Create a Boat object
plane1 = Plane("Boeing", "747") #Create a Plane object

for x in (car1, boat1, plane1):
  print(x.brand) #POLYMORPHISM 
  print(x.model)
  x.move()


Q.3) GENERATOR in Python? 

Q.4) PYTHON ITERATORS: 
An iterator is an object that can be iterated upon, means you can iterate through all values. 
Below you can an iterator object is created using __iter__ and __next__ methods. 
class MyNumbers:
  def __iter__(self):
    self.a = 1
    return self

  def __next__(self):
    if self.a <= 20:
      x = self.a
      self.a += 1
      return x
    else:
      raise StopIteration

myclass = MyNumbers()
myiter = iter(myclass)

for x in myiter:
  print(x)

Q.5 SCOPE in python? 
A variable is only available inside the region it is created
Variable can used by a function inside a function. 
Variables with Global scope could be used by anyone. 

Q.6 MODULE in python? 
It's a set of function who want to include in your code. 
Greeting is a function defined in mymodule. 
def greeting(name):
  print("Hello, " + name) # save this as mymodule.py 

import mymodule
mymodule.greeting("Jonathan")

Q.7) DATE in python? 
strftime() method is used to format date objects into readable strings

import datetime 
x = datetime.datetime.now()
print(x.strftime('%A'))

Q.8) MATH functions: 
import math 
x = math.sqrt(64)
x = math.ceil(1.4)
y = math.floor(1.4)
x = math.pi

x = min(5, 10, 25)
y = max(5, 10, 25)
x = abs(-7.25)
x = pow(4, 3)

Q.9 JSON in Python: 
Json is a syntax used to storing and exchanging data 

import json 
a = '{"name": "Suresh", "age": 30, "Gender": "male"}'
x = json.loads(a) #parse json to python 
print(x['Gender'])

import json 
# a python object (dict)
a = {"name": "Neha", "age": 30, "Gender": "Female"}
f = json.dumps(a) #converting python to json 
print(f)

Q.10 REGEX in Python? 
Character	Description	                                                                        Example	
[]	      A set of characters	                                                                "[a-m]"	
\	        Signals a special sequence (can also be used to escape special characters)	         "\d"	
.	        Any character (except newline character)	                                           "he..o"	
^	        Starts with	                                                                          "^hello"	
$	        Ends with	                                                                            "planet$"	
*	        Zero or more occurrences	                                                             "he.*o"	
+	        One or more occurrences	                                                              "he.+o"	
?	        Zero or one occurrences	                                                               "he.?o"	
{}	      Exactly the specified number of occurrences	                                           "he.{2}o"	
|	        Either or	                                                                             "falls|stays"	
()	      Capture and group

Character	Description	                                                                                        Example	
\A	      Returns a match if the specified characters are at the beginning of the string	                    "\AThe"	
\b		    Returns a match where the specified characters are at the beginning or at the end of a word
          (the "r" in the beginning is making sure that the string is being treated as a "raw string")	       r"\bain" r"ain\b"	
\B		    Returns a match where the specified characters are present, but NOT at the beginning (or at the end) 
of a word (the "r" in the beginning is making sure that the string is being treated as a "raw string")	        r"\Bain" r"ain\B"	
\d		   Returns a match where the string contains digits (numbers from 0-9)	                                  "\d"	
\D			 Returns a match where the string DOES NOT contain digits	                                              "\D"	
\s			 Returns a match where the string contains a white space character	                                     "\s"	
\S			 Returns a match where the string DOES NOT contain a white space character	                             "\S"	
\w			 Returns a match where the string contains any word characters (characters from a to Z, digits from 0-9, 
and the underscore _ character)	                                                                                  "\w"	
\W			 Returns a match where the string DOES NOT contain any word characters	                                  "\W"	
\Z			 Returns a match if the specified characters are at the end of the string	                                "Spain\Z"



FINDALL	Returns a list containing all matches
SEARCH	Returns a Match object if there is a match anywhere in the string
SPLIT	Returns a list where the string has been split at each match
SUB	Replaces one or many matches with a string

1) FINDALL 
import re
txt = "The rain in Spain"
x = re.findall("ai", txt)
print(x)

2) SEARCH 
import re
txt = " The rain in Spain"
x = re.search("\s", txt)
print("The first white-space character is located in position:", x.end())

import re
txt = "The rain in Spain"
x = re.search(r"\bS\w+", txt)
print(x.group())
print(x.span())

3) SPLIT 
import re
txt = "The rain in Spain"
x = re.split("\s", txt, 1)
print(x)

4) SUB
import re
txt = "The rain in Spain"
x = re.sub("\s", "9", txt)
print(x)


