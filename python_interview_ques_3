Q.21 CASTING IN Python? 
y = int(2.8) #y will be 2
x = float(1) #x will be 1.0
z = str(3.0) #z will be '3.0'

Q.22 STRINGS IN Python? 
NOTE: String in Python are treated as arrays of bytes representing unicode characters
E.G  a = "Hello, World!"
print(a[1])

IN in Strings 
To check if a string is present in another string, we can use IN
txt = "The best things in life are free!"
if "free" in txt:
  print("Yes, 'free' is present.")

NEGATIVE INDEXING 
NOTE: Indexing exclude the last character
b = "Hello, World!"
print(b[-5:-2])

MODIFYING STRINGS 
a = "Hello, World!"
a.upper() E.g 
a.lower() E.g 
a.strip() E.g print(a.strip())
a.replace() E.g print(a.replace("H", "J"))
a.split() E.g print(a.split(",")) # returns ['Hello', ' World!']

CONCATENATE STRING
E.g a = "Hello"
b = "World"
c = a + " " + b
print(c)

FORMATTING STRINGS
The format() method takes the passed arguments, formats them, and places them in the string where the placeholders {} are. 
E.g myorder = "I want {} pieces of item {} for {} dollars."
print(myorder.format(3, 567, 49.95))

ESCAPE CHARACTERS
To insert characters that are illegal in a string, use an escape character.
txt = "We are the so-called \"Vikings\" from the north."

STRING METHODS
capitalize(): Converts the first character to upper case
count(): Returns the number of times a specified value occurs in a string
find()/index(): Searches the string for a specified value and returns the position of where it was found
isalnum(): Returns True if all characters in the string are alphanumeric
isalpha()	Returns True if all characters in the string are in the alphabet
isdigit()	Returns True if all characters in the string are digits
islower()	Returns True if all characters in the string are lower case
join()	Joins the elements of an iterable to the end of the string
split()	Splits the string at the specified separator, and returns a list
translate() returns a string where some specified characters are replaced with the character described in a dictionary

Q.23 PYTHON TUPLES? 
Tuple is a collection which is ordered and unchangeable. Allows duplicate members.
A tuple can contain different data types

ACCESS TUPLES
E.g thistuple = ("apple", "banana", "cherry", "orange", "kiwi", "melon", "mango")
print(thistuple[:4])

UPDATE TUPLES
x = ("apple", "banana", "cherry")
y = list(x)
y[1] = "kiwi"
x = tuple(y)

UNPACKING TUPLES: 
We are also allowed to extract the values back into variables. This is called "unpacking". 
E.g fruits = ("apple", "banana", "cherry", "strawberry", "raspberry")
(green, yellow, *red) = fruits

LOOP TUPLES: 
E.g thistuple = ("apple", "banana", "cherry")
for i in range(len(thistuple)):
  print(thistuple[i])

JOIN TUPLES: 
E.g tuple1 = ("a", "b" , "c")
tuple2 = (1, 2, 3)
tuple3 = tuple1 + tuple2
print(tuple3)

TUPLE METHODS: 
count() and index() can be used on tuples 

Q.23 PYTHON OPERATORS? 
PRECEDENCE ORDER 
()	Parentheses	
**	Exponentiation	
+x  -x  ~x	Unary plus, unary minus, and bitwise NOT	
*  /  //  %	Multiplication, division, floor division, and modulus	
+  -	Addition and subtraction	
<<  >>	Bitwise left and right shifts	
&	Bitwise AND	
^	Bitwise XOR	
|	Bitwise OR	
==  !=  >  >=  <  <=  is  is not  in  not in 	Comparisons, identity, and membership operators	
not	Logical NOT	
and	AND	
or	OR
NOTE: If two operators have the same precedence, the expression is evaluated from left to right.

Q.24 PYTHON BOOLEANS? 
Almost any value is evaluated to True if it has some sort of content.
Except Below Values: 
bool(False)
bool(None)
bool(0)
bool("")
bool(())
bool([])
bool({})

ININSTANCE(): It returns bool values based on if the integer is of data type or not. 
x = 200
print(isinstance(x, int))

Q.25 PYTHON NUMBERS? 
import random
print(random.randrange(1, 10))

Q.26 PYTHON DATA TYPES? 
Example	                            Data Type
x = {"apple", "banana", "cherry"}	  set
x = range(6)	                      range
x = "Hello World"                  	str
x = {"name" : "John", "age" : 36}	  dict
x = ["apple", "banana", "cherry"]	list
x = ("apple", "banana", "cherry")	tuple
x = True	                        bool
x = None	                        NoneType

Q.27 PYTHON VARIABLES? 
VARIABLE NAMES
RULES: 
A variable name must start with a letter or the underscore character
A variable name cannot start with a number
A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )
Variable names are case-sensitive (age, Age and AGE are three different variables)
A variable name cannot be any of the Python keywords.

OUTPUT VARIABLES 
x = 5
y = "John"
print(x, y)

GLOBAL VARIABLES: 
def myfunc():
  global x
  x = "fantastic"
myfunc()
print("Python is " + x)

PYTHON INDENTATION: 
RULES: 
The number of spaces is up to you as a programmer, the most common use is four, but it has to be at least one.
You have to use the same number of spaces in the same block of code. 


