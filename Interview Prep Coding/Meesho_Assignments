Q4) An eCommerce company has the following tables

table: T1
(order id,amount,quantity,date,used ID)

Table: T2
(user ID,name,state,city)

Please write SQL queries for the below points

    MoM (month over month) growth of order from the state of Gujarat
    which month of 2019 attributes the Highest % change in the total amount 
    Write query of Point 1 with a different logic and compare the performance

Note: You are allowed to make any assumption

Sol. 
select date, total-coalesce(lag(total) over(order by date asc ),0) as change
from ( 
select date_trunc('month', date) as date, sum(quantity) as total
from T1
join T2 on T1."user ID" = T2."user ID" 
where state = 'Gujarat' 
group by 1 
) tt 

select date
from ( 
select date_trunc('month', date) as date, sum(quantity) as total, sum(quantity)-coalesce(lag(sum(quantity)) over(order by date asc ),0)/coalesce(lag(sum(quantity)) over(order by date asc ),0) as change
from T1
join T2 on T1."user ID" = T2."user ID" 
where date_trunc('year', date) = 2019
group by 1 
) tt 
having change = max(change)
group by 1 

Q2) Given the tables Order_Timeline(schema id,order_id,  message, created) & Order_Shipment Table(schema id, order_id,actual_dispatch_date,created) , write a SQL Query to find

    % orders shipped before first message date(OTIF)
    % orders shipped on first message date+1(OTIF+1)
    % orders shipped on first message date+2(OTIF+2)
    %orders shipped after that(OTIF+>2)
Order_Timeline contains the message for the expected dispatch date, Order_shipment gives you the real dispatch date. They are combined using order_id.

Ans. 
select 100.0*count(order_id) filter(where actual_dispatch_date < first_message_date)/count(*) as "(OTIF)", 
100.0*count(order_id) filter(where actual_dispatch_date = first_message_date + interval '1 day')/count(*) as "(OTIF+1)", 
100.0*count(order_id) filter(where actual_dispatch_date = first_message_date + interval '2 day')/count(*) as "(OTIF+2)", 
100.0*count(order_id) filter(where actual_dispatch_date > first_message_date + interval '2 day')/count(*) as "(OTIF+>2)"

from Order_Shipment as os , 
join (select os.order_id, min(ot.created) as first_message_date  from Order_Timeline group by 1 ) as ot  os.order_id = ot.order_id

Q1) Given an Order Table with the schema (id, user_id, total, created). Write a SQL Query to create a retention plot. The format for the raw data and output is given. 

Week Start Date is the 1st Week in which the User_Id Placed the order, Week 0 is Unique User ids who placed their 1st Order in this week. Out of those ids, Week 1 is unique users who placed an order in 1st Week + 1, Then Week 2 is 1st Week + 2, and so on till Week 10.

Ans. 

WITH first_order_date AS (
    SELECT 
        user_id,
        date_trunc('week', MIN(DATE_TRUNC('day', created) - INTERVAL '2 day' + (EXTRACT('DOW' FROM created) - 1) * INTERVAL '1 day')) AS week_start_date
    M
        "Order"
    GROUP BY
        user_id
),

Week_Diff AS (
    SELECT
        o.user_id,
        fod.week_start_date,
        EXTRACT('week' from o.created - fod.week_start_date) AS week_diff
    FROM
        order o 
    LEFT JOIN
        first_order_date fod on o.user_id = fod.user_id
)
SELECT
    week_start_date,
    COUNT(DISTINCT CASE WHEN week_diff = 0 THEN user_id END) as "Week 00",
    COUNT(DISTINCT CASE WHEN week_diff = 1 THEN user_id END) as "Week 01",
    COUNT(DISTINCT CASE WHEN week_diff= 2 THEN user_id END) as "Week 02",
    COUNT(DISTINCT CASE WHEN week_diff = 3 THEN user_id END) as "Week 03",
    COUNT(DISTINCT CASE WHEN week_diff = 4 THEN user_id END) as "Week 04",
    COUNT(DISTINCT CASE WHEN week_diff = 5 THEN user_id END) as "Week 05",
    COUNT(DISTINCT CASE WHEN week_diff = 6 THEN user_id END) as "Week 06",
    COUNT(DISTINCT CASE WHEN week_diff= 7 THEN user_id END) as "Week 07",
    COUNT(DISTINCT CASE WHEN week_diff = 8 THEN user_id END) as "Week 08",
    COUNT(DISTINCT CASE WHEN week_diff = 9 THEN user_id END) as "Week 09",
    COUNT(DISTINCT CASE WHEN week_diff = 10 THEN user_id END) as "Week 10"
FROM Week_Diff
GROUP BY 1
ORDER BY 1
3) 
select count(distinct Employee id)
from table as t
join (select Employee id, max(created) as last_login
from table
group by 1 ) tt on t."Employee id" = tt."Employee id" 
where created <  now()::timestamp
and tt.last_login = t.created 
and tt.Action ilike = 'In'


select count(distinct Employee id)
from table as t
join (select Employee id, max(created) as last_login
from table 
where created <= to_timestamp('2019-05-01 19:05:00')
group by 1
) tt on t."Employee id" = tt."Employee id" 
where created <=  '2019-05-01 19:05:00'::timestamp
and tt.last_login = t.created 
and tt.Action ilike = 'In'


